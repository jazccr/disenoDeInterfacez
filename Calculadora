Panel panel;

void setup() {
  int naranja = #DE801B;
  int blanco = #FFFFFF;

  size(230,310);
  panel = newPanel();
  panel.add(
    newVBox().gap(0).position(0,0).size(230,310)
    .add(newHBox()
      .add(newTextField().columns(12).value("").id("numeros").size(228,51).fontSize(30))
    )
    
    .add(newHBox().gap(0)
      .add(newButton("C").id("borrado").fontSize(20))
      .add(newButton("±").id("masymenos").fontSize(20))
      .add(newButton("%").id("porcentaje").fontSize(20))
      .add(newButton("÷", naranja).id("division").fontSize(20).fontColor(blanco))
    )
    .add(newHBox().gap(0)
      .add(newButton("7").id("7").fontSize(20))
      .add(newButton("8").id("8").fontSize(20))
      .add(newButton("9").id("9").fontSize(20))
      .add(newButton("x", naranja).id("multiplicar").fontSize(20).fontColor(blanco))
    )
    .add(newHBox().gap(0)
      .add(newButton("4").id("4").fontSize(20))
      .add(newButton("5").id("5").fontSize(20))
      .add(newButton("6").id("6").fontSize(20))
      .add(newButton("-",naranja).id("menos").fontSize(20).fontColor(blanco))
    )
    .add(newHBox().gap(0)
      .add(newButton("1").id("1").fontSize(20))
      .add(newButton("2").id("2").fontSize(20))
      .add(newButton("3").id("3").fontSize(20))
      .add(newButton("+", naranja).id("mas").fontSize(20).fontColor(blanco))
    )
    .add(newHBox().gap(0)
      .add(newButton("0").id("cero").size(114,51).fontSize(20))
      .add(newButton(".").id("punto").size(57,51).fontSize(20))
      .add(newButton("=", naranja).id("igual").size(57,51).fontSize(20).fontColor(blanco))
     )
  );
  panel.update();
}

void draw() {
  background(255);
  panel.draw();
}

void mousePressed() {
  panel.mouseDown(mouseX,mouseY,new Click());
}

void mouseReleased() {
  panel.mouseUp(mouseX,mouseY,null);
}

void keyPressed() {
  panel.keyStroke(key,keyCode,null);
}

class Click extends Action {
  void run(Graphic g) {
    Control c = (Control)g;
    
    if (c.id()=="masymenos") 
      printPanelMasYMenos();
      
    if (c.id()=="borrado") 
      printPanelBorrado();
  
    if (c.id()=="cero") 
      printPanelValor0();
      
     if (c.id()=="1") 
      printPanelValor1();
  
       if (c.id()=="2") 
      printPanelValor2();
  
       if (c.id()=="3") 
      printPanelValor3();
  
       if (c.id()=="4") 
      printPanelValor4();
  
       if (c.id()=="5") 
      printPanelValor5();
  
       if (c.id()=="6") 
      printPanelValor6();
  
       if (c.id()=="7") 
      printPanelValor7();
  
       if (c.id()=="8") 
      printPanelValor8();
  
       if (c.id()=="9") 
      printPanelValor9();
      
      if (c.id()=="mas") 
      printPanelSuma();
      
      if (c.id()=="menos") 
      printPanelResta();
      
      if (c.id()=="igual") 
      printPanelIgual();
      
      if (c.id()=="division") 
      printPanelDivision();
      
      if (c.id()=="multiplicar") 
      printPanelMultiplicacion();
      
      if (c.id()=="porcentaje") 
      printPanelPorcentaje();
      if (c.id()=="punto") 
      printPanelPunto();
  }
  
void printPanelPunto() {
    Control numeros = (Control)panel.getById("numeros");
    String cadena;
    cadena = numeros.value();
    if(cadena.length()<=0){
    numeros.value("0.");
    }else{
      if(!existePunto(numeros.value())){
        numeros.value(numeros.value()+".");
      }
    }
    panel.update();
  }
  
   boolean existePunto(String cadena){
    boolean resul =false;
    for(int i=0; i<cadena.length();i++){
      if(cadena.substring(i, i+1).equals(".")){
        resul=true;
        break;
      }
    }
    return resul;
  }
  
    void printPanelMasYMenos() {
    Control numeros = (Control)panel.getById("numeros");
    panel.num =Integer.parseInt(numeros.value());
    numeros.value(""+panel.num*(-1));
    panel.update();
  }
  void printPanelBorrado() {
    Control numeros = (Control)panel.getById("numeros");
    panel.resul= 0;
    panel.num2= 0;
    panel.num= 0;
    numeros.value("");
    panel.update();
  }
    void printPanelValor0() {
    Control numeros = (Control)panel.getById("numeros");
    int num;
    num =Integer.parseInt(numeros.value()+0);
    numeros.value(""+num);
    panel.update();
  }
  
  void printPanelValor1() {
    Control numeros = (Control)panel.getById("numeros");
    int num;
    num =Integer.parseInt(numeros.value()+1);
    numeros.value(""+num);
    panel.update();
  }
    
  void printPanelValor2() {
    Control numeros = (Control)panel.getById("numeros");
    int num;
    num =Integer.parseInt(numeros.value()+2);
    numeros.value(""+num);
    panel.update();
  }
  void printPanelValor3() {
    Control numeros = (Control)panel.getById("numeros");
    int num;
    num =Integer.parseInt(numeros.value()+3);
    numeros.value(""+num);
    panel.update();
  }
  void printPanelValor4() {
    Control numeros = (Control)panel.getById("numeros");
    
    panel.num =Integer.parseInt(numeros.value()+4);
    numeros.value(""+panel.num);
    panel.update();
  }
  void printPanelValor5() {
    Control numeros = (Control)panel.getById("numeros");
    int num;
    num =Integer.parseInt(numeros.value()+5);
    numeros.value(""+num);
    panel.update();
  }
  void printPanelValor6() {
    Control numeros = (Control)panel.getById("numeros");
    int num;
    num =Integer.parseInt(numeros.value()+6);
    numeros.value(""+num);
    panel.update();
  }
  void printPanelValor7() {
    Control numeros = (Control)panel.getById("numeros");
    int num;
    num =Integer.parseInt(numeros.value()+7);
    numeros.value(""+num);
    panel.update();
  }
  void printPanelValor8() {
    Control numeros = (Control)panel.getById("numeros");
    int num;
    num =Integer.parseInt(numeros.value()+8);
    numeros.value(""+num);
    panel.update();
  }
  void printPanelValor9() {
    Control numeros = (Control)panel.getById("numeros");
    int num;
    num =Integer.parseInt(numeros.value()+9);
    numeros.value(""+num);
    panel.update();
  }
  
 
  void printPanelResta() {
        Control numeros = (Control)panel.getById("numeros");
   if(numeros.value()!=""){
   panel.num =Integer.parseInt(numeros.value());
    numeros.value("");
    panel.signo="-";
   }
   
    panel.update();

  }
  
  void printPanelDivision() {
     Control numeros = (Control)panel.getById("numeros");
   if(numeros.value()!=""){
   panel.num =Integer.parseInt(numeros.value());
    numeros.value("");
    panel.signo="/";
   }
    panel.update();
  
  }
  void printPanelMultiplicacion() {
     Control numeros = (Control)panel.getById("numeros");
   if(numeros.value()!=""){
   panel.num =Integer.parseInt(numeros.value());
    numeros.value("");
    panel.signo="*";
   }
    panel.update();
  }
  /////////////////////////////////////////////////////////////////
  void printPanelPorcentaje() {
    Control numeros = (Control)panel.getById("numeros");
   if(numeros.value()!=""){
   panel.num =Integer.parseInt(numeros.value());
    numeros.value("");
    panel.signo="%";
   }
    panel.update();
  }
   void printPanelSuma() {
    Control numeros = (Control)panel.getById("numeros");
   if(numeros.value()!=""){
   panel.num =Integer.parseInt(numeros.value());
    numeros.value("");
    panel.signo="+";
   }
    panel.update();
  }
  void printPanelIgual() {
     Control numeros = (Control)panel.getById("numeros");
     if(numeros.value()==""){
       //panel.num2=0;
     }else{
    panel.num2=Integer.parseInt(numeros.value());
     }
    
    if(panel.signo=="+"){
    panel.resul= panel.num + panel.num2;
  }
      if(panel.signo=="-"){
    panel.resul= panel.num - panel.num2;
  }
        if(panel.signo=="*"){
    panel.resul= panel.num * panel.num2;
  }
        if(panel.signo=="/"){
    panel.resul= panel.num / panel.num2;
  }
        if(panel.signo=="%"){
    panel.resul= panel.num * (panel.num2/100);
  }

  numeros.value(""+panel.resul);
  
    panel.update();
  }
}

abstract class Component extends Group {
  int x,y,w,h;
  String _id = "";
  
  Component position(int a, int b) {
    x=a; y=b; return this;
  }
  
  Component width(int a) {
    w=a; return this;
  }
  
  Component height(int a) {
    h=a; return this;
  }
  
  Component size(int a, int b) {
    w=a; h=b; return this;
  }
  
  Component id(String n) {
    _id = n; return this;
  }
  
  String id() {
    return _id;
  }
  
  void keyStroke(int k, int c, Action act) {}
  
  void mouseDown(float a, float b, Action act) {}
  
  void mouseUp(float a, float b, Action act) {}
  
  abstract void update();
 
}

abstract class Container extends Component {
  
  Component getById(String n) {
    Component c=null;
    for (int i=0; i<len();i++) {
      c = ((Component)get(i));
      if (c.id().equals(n)) 
        return c;
      else if (c instanceof Container) {
        Component x=null;
        x = ((Container)c).getById(n);
        if (x!=null) return x;
      } 
    }
    return null;
  }
  
  void keyStroke(int k, int c, Action act) {
    for (int i=0; i<len();i++)
      ((Component)get(i)).keyStroke(k,c,act);
  }
  
  void mouseDown(float a, float b, Action act) {
    for (int i=0; i<len();i++)
      ((Component)get(i)).mouseDown(a,b,act);
  }
  
  void mouseUp(float a, float b, Action act) {
    for (int i=0; i<len();i++)
      ((Component)get(i)).mouseUp(a,b,act);
  }
}

class Panel extends Container {
  int num ;
  int num2;
  int resul;
  String signo="";
  void update() {
    for (int i=0; i<len();i++) {
      Component c = ((Component)get(i));
      c.update();
    }
  }
}

Panel newPanel() {
  return new Panel();
}

class Label extends Component {
  private String str;
  
  Label(String a) { str=a; }
  
  void update() {
    empty();
    add(newText(str,x,y+h/2));
  }
}

Label newLabel(String s) {
  return new Label(s);
}

Control focus;

abstract class Control extends Component {
  boolean hasFocus = false;
  String _value;
  
  Control value(String n) {
    _value = n; return this;
  }
  
  String value() {
    return _value;
  }
  
  void mouseDown(float a, float b, Action act) {
    if ((x<a)&&(a<x+w)&&(y<b)&&(b<y+h)) {
      if (focus!=null&&focus!=this) {
        focus.hasFocus=false;
        focus.update();
      }
      focus = this;
      hasFocus = true;
      if (act!=null) act.run(this);
    }
    update();
  }
}

class Button extends Control {
  private String str;
  
  int colors = 220;
  int textAdjust = 6;
  
  Button(String l) { str = l; }
  
  Button(String l, int c) { str = l; colors=c; }

  void update() {
    empty();
    int clr = colors;
    if (hasFocus) clr = #D3E7ED;
    add(newRect(x,y,w,h,0).fillColor(clr));
    add(newText(str,x+w/2-str.length()*textAdjust,y+h/2));
  }
  
  void mouseUp(float a, float b, Action act) {
    if ((x<a)&&(a<x+w)&&(y<b)&&(b<y+h)) {
      if (focus==this) {
        focus = null;
        hasFocus = false;
        update();
      }
      if (act!=null) act.run(this);
    }
  }
}

Button newButton(String l) {
  return new Button(l);
}
Button newButton(String l,int c) {
  return new Button(l,c);
}

class TextComponent extends Control {
  String label;
  
  int start = 0;
  int _columns = 13;
  
  TextComponent value(String a) {
    label = _value = a; return this;
  }
  
  TextComponent columns(int a) {
    _columns = a; return this;
  }
  
  void update() {
    empty();
    int clr = 255;
    if (hasFocus) clr = #D3E7ED;
    add(newRect(x,y,w,h).fillColor(clr));
    add(newText(label,x+4,y+h/2));
  }
}

class TextField extends TextComponent {
  
  void keyStroke(int keyValue, int keySpecial, Action act) {
    if (!hasFocus) return;
    if (act!=null) act.run(this);
    if (keyValue == BACKSPACE) {
      if (_value.length()!=0)
        _value = _value.substring(0,_value.length()-1);
    } else
      _value += char(keyValue);
      //_value += String.fromCharCode(keyValue);
    int len = _value.length();
    if (start+len>_columns) { 
      start = len-_columns;
      len = start+_columns;
    }
    label = _value.substring(start,len);
    update();
  }
}

TextField newTextField() {
  return new TextField();
}

class RadioButton extends Control {
  private String str;
  private RadioButtonGroup group;
  boolean checked;
  
  RadioButton(String l) { 
    str = l;
  }
  
  RadioButton group(RadioButtonGroup g) {
    group = g;
    g.add(this);
    return this;
  }
  
  void update() {
    empty();
    int clr = 255;
    _value = "";
    if (hasFocus) {
      checked = true;
      _value = "checked";
      if (group!=null) 
        group.checkRadio(this);
    }
    if (checked) clr = 0;
    add(newCircle(x+6,y+h/2,12));
    add(newCircle(x+6,y+h/2,8).fillColor(clr));
    add(newText(str,x+18,y+h/2));
  }
}

RadioButton newRadioButton(String l) {
  return new RadioButton(l);
}

class RadioButtonGroup extends Group {

  void checkRadio(RadioButton r) {
    RadioButton temp=null;
    for (int i=0; i<len();i++) {
      temp = (RadioButton)get(i);
      if (temp!=r) {
        temp.checked = false;
        temp.update();
      }
    }  
  }
}

class CheckBox extends Control {
  private String str;
  boolean checked = false;
  
  CheckBox(String l) { str = l; }
  
  void update() {
    empty();
    _value = "";
    add(newRect(x,y+h/2-6,12,12));
    if (hasFocus)
       checked = !checked;
    if (checked) {
      add(newPolyline(new float[] {x+1,y+5,x+6,y+11,x+11,y+1}).translate(0,h/2-6));
      _value = "checked";
    }
    add(newText(str,x+18,y+h/2));
  }
}

CheckBox newCheckBox(String l) {
  return new CheckBox(l);
}

class HBox extends Container {
  float _gap=4;
  
  HBox gap(float a) {
    _gap=a; return this;
  }
  
  void update() {
    int n = 0;
    int offset = x;
    float remain = w;
    for (int i=0; i<len();i++) {
      Component c = ((Component)get(i));
      if (c.w==0) n++;
      else remain -= c.w;
    }
    remain -= _gap*len()-1;
    for (int i=0; i<len();i++) {
      Component c = ((Component)get(i));
      c.x = offset;
      c.y = y;
      if (c.w==0) c.w = (int)remain/n;
      if (c.h==0) c.h = h;
      offset += _gap+c.w;
      c.update();
    }
  }
}

HBox newHBox() {
  return new HBox();
}

class VBox extends Container {
  float _gap=4;
  
  VBox gap(float a) {
    _gap=a; return this;
  }
  
  void update() {
    int n = 0;
    int offset = y;
    float remain = h;
    for (int i=0; i<len();i++) {
      Component c = ((Component)get(i));
      if (c.h==0) n++;
      else remain -= c.h;
    }
    remain -= _gap*len()-1;
    for (int i=0; i<len();i++) {
      Component c = ((Component)get(i));
      c.y = offset;
      c.x = x;
      if (c.h==0) c.h = (int)remain/n;
      if (c.w==0) c.w = w;
      offset += _gap+c.h;
      c.update();
    }
  }
}

VBox newVBox() {
  return new VBox();
}
